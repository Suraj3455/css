/* General Setup */
:root {
    font-size: 16px; /* Defines the base font size for rem units */
}

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
    line-height: 1.6;
}

header {
    background-color: #333;
    color: #fff;
    text-align: center;
    padding: 1rem 0;
}

footer {
    text-align: center;
    padding: 1rem 0;
    background-color: #333;
    color: #fff;
    margin-top: 2rem;
}

/* ðŸ”µ Mobile-First Approach */
/* This is the base CSS. All styles are optimized for mobile by default. */
.container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    padding: 1rem;
    align-items: center;
}

.box {
    background-color: #fff;
    border: 2px solid #ddd;
    border-radius: 8px;
    padding: 1.5rem;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    text-align: center;
    width: 90%; /* Responsive unit: using a percentage */
}

/* ðŸ”µ Responsive Units */
.box h2 {
    /* Uses vw (viewport width) for a title that scales with the screen width */
    font-size: 5vw;
    color: #555;
    margin-top: 0;
}

.box p {
    /* Uses rem (root em) which is relative to the root font-size (16px) */
    font-size: 1rem;
    color: #666;
}

/* ðŸ”µ CSS Functions */
.box-2 {
    /* 'min()' ensures the width is never smaller than 250px, but it can get larger. */
    width: min(90%, 500px); 
    /* 'clamp()' sets a fluid font size: 1.2rem is the minimum, 1.8rem is the max,
       and 3vw handles the scaling in between. */
    font-size: clamp(1.2rem, 3vw, 1.8rem);
    background-color: #e6f7ff;
}

/* ðŸ”µ Media Queries */
/* This query applies styles for screens that are at least 768px wide (tablets & up). */
/* This is an example of a **Mobile-First** query, where we progressively enhance the layout. */
@media (min-width: 768px) {
    .container {
        flex-direction: row; /* Changes layout to a horizontal row */
        flex-wrap: wrap; /* Allows items to wrap to the next line */
        justify-content: center;
    }

    .box {
        width: 45%; /* Now boxes take up about half the container width */
    }

    .box-1 {
        background-color: #d4edda; /* Changes color for a different layout */
    }
}

/* A second media query for even larger screens (desktops & up). */
@media (min-width: 1024px) {
    .box {
        width: 30%; /* Boxes now take up about a third of the container width */
    }

    .box-3 {
        background-color: #fff3cd; /* Another color change */
    }
}

/* ðŸ”µ Container Queries */
/* Container queries allow components to respond to the size of their parent container, not the viewport.
   This is very useful for reusable components. */
.container-query-example {
    container-type: inline-size; /* Defines the container context */
}

@container (min-width: 500px) {
    .container-query-example .box {
        background-color: #ffe5e5;
    }
}